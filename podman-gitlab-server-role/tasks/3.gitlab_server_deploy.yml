---
- name: "Setup PostgreSQL Container"
  become_user: "{{ gitlab_service_account }}"
  podman_container:
    name: "postgres"
    image: "postgres:latest"
    state: present
    env:
      POSTGRES_DB: "gitlabhq_production"
      POSTGRES_USER: "gitlab"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
    volumes:
      - "/srv/postgresql/data:/var/lib/postgresql/data:Z"
    ports:
      - "5432:5432"
  tags:
    - postgresql
    - initial_setup

- name: "Check for GitLab Server Container Service File"
  become_user: "{{ gitlab_service_account }}"
  stat:
    path: "/home/{{ gitlab_service_account }}/.config/systemd/user/container-{{ gitlab_server_name }}.service"
  register: gitlab_service_file_status
  tags:
    - initial_setup
    - create_gitlab

- name: "Check GitLab SSL Directory"
  become_user: "{{ gitlab_service_account }}"
  stat:
    path: "/home/{{ gitlab_service_account }}/.local/share/containers/storage/volumes/git_app_data/_data/ssl"
  register: gitlab_ssl_dir_status
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Open Firewall for {{ gitlab_server_name }} Container"
  firewalld:
    port: "{{ item }}"
    state: enabled
    permanent: yes
  with_items:
    - "{{ gitlab_firewall_ssl_port }}"
    - "{{ gitlab_firewall_ssh_port }}"
  tags:
    - initial_setup
    - create_gitlab
  register: firewall_status

- name: "Deploy GitLab | Reload FirewallD"
  shell: "firewall-cmd --complete-reload"
  when: firewall_status.results | selectattr('changed') | list | length > 0

- name: "Create GitLab CE Container with External PostgreSQL"
  become_user: "{{ gitlab_service_account }}"
  podman_container:
    name: "{{ gitlab_server_name }}"
    image: "{{ gitlab_server_image_name }}"
    state: present
    hostname: "{{ gitlab_server_hostname }}{{ domain }}"
    restart_policy: "always"
    shm_size: "2g"
    volumes:
      - "git_app_data:/etc/gitlab:Z"
      - "git_logs:/var/log/gitlab:Z"
      - "git_config_data:/var/opt/gitlab:Z"
    ports:
      - "{{ gitlab_container_ssl_port }}"
      - "{{ gitlab_container_ssh_port }}"
    env:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}'
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_encoding'] = 'unicode'
        gitlab_rails['db_host'] = 'localhost'
        gitlab_rails['db_port'] = '5432'
        gitlab_rails['db_username'] = 'gitlab'
        gitlab_rails['db_password'] = '{{ postgres_password }}'
        gitlab_rails['db_database'] = 'gitlabhq_production'
  tags:
    - initial_setup
    - create_gitlab

- name: "Check if GitLab container exists"
  become_user: "{{ gitlab_service_account }}"
  podman_container_info:
    name: "{{ gitlab_server_name }}"
  register: gitlab_container_info
  tags:
    - initial_setup
    - create_gitlab

- name: "Set fact for gitlab_container_exists"
  set_fact:
    gitlab_container_exists: "{{ gitlab_container_info.containers | length > 0 }}"
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Restart {{ gitlab_server_name }} Container"
  become_user: "{{ gitlab_service_account }}"
  podman_container:
    name: "{{ gitlab_server_name }}"
    state: started
  when: gitlab_container_exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Pause for 1 Minute After Restart"
  pause:
    minutes: 1
  when: gitlab_container_exists | bool
  tags:
    - initial_setup
    - create_gitlab
    
- name: "Deploy GitLab | Modify gitlab.rb to Support FQDN"
  become_user: "{{ gitlab_service_account }}"
  blockinfile:
    path: "/home/{{ gitlab_service_account }}/.local/share/containers/storage/volumes/git_app_data/_data/gitlab.rb"
    block: |
      # Add Support for SSL 
      external_url "https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/"
      nginx['ssl_certificate'] = "/etc/gitlab/ssl/{{ gitlab_server_hostname }}{{ domain }}.crt"
      nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/{{ gitlab_server_hostname }}{{ domain }}.pem"
  when: gitlab_container_exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Create GitLab SSL Directory"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman exec -it {{ gitlab_server_name }} mkdir /etc/gitlab/ssl/"
  when: not gitlab_ssl_dir_status.stat.exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Copy SSL Cert to GitLab SSL Directory"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman cp {{ item }}"
  with_items:
    - "/etc/{{ gitlab_server_hostname }}/ssl/{{ gitlab_server_hostname }}{{ domain }}.pem {{ gitlab_server_name }}:/etc/gitlab/ssl"
    - "/etc/{{ gitlab_server_hostname }}/ssl/{{ gitlab_server_hostname }}{{ domain }}.crt {{ gitlab_server_name }}:/etc/gitlab/ssl"
  when: not gitlab_ssl_dir_status.stat.exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Reconfigure GitLab after changes"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman exec {{ gitlab_server_name }} gitlab-ctl reconfigure"
  when: gitlab_container_exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Create Systemd User Directory"
  become_user: "{{ gitlab_service_account }}"
  file:
    path: "/home/{{ gitlab_service_account }}/.config/systemd/user"
    state: directory
  when:
    - not gitlab_service_file_status.stat.exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Wait for GitLab to be Up"
  uri:
    url: "https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/users/sign_in"
    validate_certs: no
  register: gitlab_response
  until: gitlab_response.status == 200
  retries: 35
  delay: 30
  tags:
    - create_gitlab

- name: "Deploy GitLab | Create Systemd Service Files for GitLab Server"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman generate systemd --name {{ gitlab_server_name }} --files --new"
  args:
    chdir: "/home/{{ gitlab_service_account }}/.config/systemd/user/"
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Reload Systemd Daemon"
  become_user: "{{ gitlab_service_account }}"
  shell: "systemctl daemon-reload"
  ignore_errors: true
  tags:
    - initial_setup
    - create_gitlab     
    
- name: "Deploy GitLab | Wait for GitLab to be Up"
  uri:
    url: "https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/users/sign_in"
    validate_certs: no
  register: gitlab_response
  until: gitlab_response.status == 200
  retries: 75
  delay: 10
  tags:
    - create_gitlab

- name: "Retrieve GitLab Admin Password"
  become_user: "{{ gitlab_service_account }}"
  command: "podman exec -it {{ gitlab_server_name }} grep 'Password:' /etc/gitlab/initial_root_password"
  register: gitlab_password_result
  tags:
    - retrieve_password

- name: "Set GitLab Admin Password Fact"
  set_fact:
    gitlab_admin_password: "{{ gitlab_password_result.stdout.split('Password: ')[1] | trim }}"
  tags:
    - set_password_fact

- name: "Deploy GitLab | Save GitLab Admin Credentials to File"
  copy:
    dest: "/home/{{ specific_user }}/gitlab_admin_credentials.txt"
    content: |
      GitLab is up and running.
      You can access it at https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/
      Admin Username: root
      Admin Password: {{ gitlab_admin_password }}
    owner: "{{ specific_user }}"
    mode: '0600'
  tags:
    - create_gitlab

- name: "Deploy GitLab | Print GitLab Admin Credentials"
  debug:
    msg: |
      GitLab is up and running.
      You can access it at https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/
      Admin Username: root
      Admin Password: {{ gitlab_admin_password }}
  tags:
    - print_credentials

- name: "Deploy GitLab | Start {{ gitlab_server_name }} with Systemd"
  become_user: "{{ gitlab_service_account }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ gitlab_service_account_uid }}"
  systemd:
    name: "container-{{ gitlab_server_name }}.service"
    state: started
    enabled: yes
    daemon_reload: yes
    scope: user
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Wait for {{ gitlab_server_name }} to start"
  become_user: "{{ gitlab_service_account }}"
  wait_for:
    path: "/home/{{ gitlab_service_account }}/.config/systemd/user/container-{{ gitlab_server_name }}.service.status"
    state: started
    timeout: 60
  ignore_errors: true
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Ensure {{ gitlab_server_name }} Container is Running"
  become_user: "{{ gitlab_service_account }}"
  podman_container:
    name: "{{ gitlab_server_name }}"
    state: started
  register: gitlab_container_status
  until: gitlab_container_status.state.running
  retries: 75
  delay: 10
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Fail if {{ gitlab_server_name }} Container is not Running"
  fail:
    msg: "The {{ gitlab_server_name }} container failed to start. Please check the logs for more details."
  when: gitlab_container_status.state.running is not defined or not gitlab_container_status.state.running
  tags:
    - initial_setup
    - create_gitlab
