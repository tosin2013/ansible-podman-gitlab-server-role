---
- name: "Create a podman network for GitLab and PostgreSQL"
  podman_network:
    name: gitlab_network
    state: present
  become_user: "{{ gitlab_service_account }}"
  tags:
    - initial_setup
    - create_gitlab

- name: "Setup PostgreSQL Container"
  become_user: "{{ gitlab_service_account }}"
  podman_container:
    name: "postgres"
    image: "docker.io/library/postgres:latest"
    state: started
    network: gitlab_network
    privileged: yes
    env:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "{{ gitlab_postgres_password }}"
    volumes:
      - "postgresql:/var/lib/postgresql/data:Z"
    ports:
      - "5432:5432"
  register: postgres_container_result
  failed_when: 
    - postgres_container_result.failed
    - "'Error: unable to start container' in postgres_container_result.msg"
  tags:
    - initial_setup
    - create_gitlab

- name: "Display PostgreSQL container error"
  debug:
    msg: "PostgreSQL container failed to start. Error: {{ postgres_container_result.msg }}"
  when: postgres_container_result.failed
  tags:
    - initial_setup
    - create_gitlab

- name: "Check if PostgreSQL container exists and is running"
  become_user: "{{ gitlab_service_account }}"
  podman_container_info:
    name: "postgres"
  register: postgres_container_info
  tags:
    - initial_setup
    - create_gitlab

- name: Wait for PostgreSQL to start
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 5432
    delay: 5
    timeout: 30
  tags:
    - initial_setup
    - create_gitlab

- name: "Set fact for postgres_container_status"
  set_fact:
    postgres_container_running: "{{ postgres_container_info.containers | length > 0 and postgres_container_info.containers[0].State.Running }}"
  tags:
    - initial_setup
    - create_gitlab

- name: "Handle PostgreSQL Container Status"
  fail:
    msg: "PostgreSQL container is not running. Please check the container logs for more information."
  when: not postgres_container_running
  tags:
    - initial_setup
    - create_gitlab

- name: "Optimize PostgreSQL for GitLab"
  become_user: "{{ gitlab_service_account }}"
  shell: >
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET shared_buffers = '256MB';\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET work_mem = '8MB';\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET maintenance_work_mem = '64MB';\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET effective_cache_size = '1GB';\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET wal_buffers = '16MB';\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET checkpoint_completion_target = 0.9;\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET random_page_cost = 1.1;\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET effective_io_concurrency = 200;\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET autovacuum = on;\"" && \
    podman exec postgres bash -c "psql -U postgres -c \"ALTER SYSTEM SET max_connections = 300;\""
  tags:
    - initial_setup
    - create_gitlab

- name: "Reload PostgreSQL configuration"
  become_user: "{{ gitlab_service_account }}"
  command: podman exec -u postgres postgres pg_ctl reload -D /var/lib/postgresql/data
  tags:
    - initial_setup
    - create_gitlab

- name: "Stop PostgreSQL Container"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman stop postgres"
  tags:
    - initial_setup
    - create_gitlab

- name: "Start PostgreSQL Container"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman start postgres"
  tags:
    - initial_setup
    - create_gitlab

- name: Sleep for 30 seconds
  pause:
    seconds: 30
  tags:
    - initial_setup
    - create_gitlab

- name: "Create GitLab Production Database"
  become_user: "{{ gitlab_service_account }}"
  command: podman exec -u postgres postgres psql -c "CREATE DATABASE gitlabhq_production;"
  register: create_db_result
  failed_when: 
    - create_db_result.rc != 0
  tags:
    - initial_setup
    - create_gitlab

- name: "Check for GitLab Server Container Service File"
  become_user: "{{ gitlab_service_account }}"
  stat:
    path: "/home/{{ gitlab_service_account }}/.config/systemd/user/container-{{ gitlab_server_name }}.service"
  register: gitlab_service_file_status
  tags:
    - initial_setup
    - create_gitlab

- name: "Check GitLab SSL Directory"
  become_user: "{{ gitlab_service_account }}"
  stat:
    path: "/home/{{ gitlab_service_account }}/.local/share/containers/storage/volumes/git_app_data/_data/ssl"
  register: gitlab_ssl_dir_status
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Open Firewall for {{ gitlab_server_name }} Container"
  firewalld:
    port: "{{ item }}"
    state: enabled
    permanent: true
  with_items:
    - "{{ gitlab_firewall_ssl_port }}"
    - "{{ gitlab_firewall_ssh_port }}"
    - "80/tcp"
  tags:
    - initial_setup
    - create_gitlab
  register: firewall_status

- name: "Deploy GitLab | Reload FirewallD"
  shell: "firewall-cmd --complete-reload"
  when: firewall_status.results | selectattr('changed') | list | length > 0
  tags:
    - initial_setup
    - create_gitlab

- name: "Get Host IP Address"
  become_user: "{{ gitlab_service_account }}"
  shell: hostname -I | awk '{print $1}'
  register: host_ip_result
  tags:
    - initial_setup
    - create_gitlab

- name: "Set PostgreSQL IP fact"
  set_fact:
    postgres_ip: "{{ host_ip_result.stdout }}"
  tags:
    - initial_setup
    - create_gitlab

- name: "Generate a secure password for GitLab root"
  set_fact:
    gitlab_root_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"
  tags:
    - initial_setup
    - create_gitlab

- name: "Create GitLab CE Container with External PostgreSQL"
  become_user: "{{ gitlab_service_account }}"
  podman_container:
    name: "{{ gitlab_server_name }}"
    image: "{{ gitlab_server_image_name }}"
    state: present
    hostname: "{{ gitlab_server_hostname }}{{ domain }}"
    network: gitlab_network
    network_mode: "slirp4netns:allow_host_loopback=true"
    restart_policy: "always"
    shm_size: "2g"
    volumes:
      - "git_app_data:/etc/gitlab:Z"
      - "git_logs:/var/log/gitlab:Z"
      - "git_config_data:/var/opt/gitlab:Z"
    ports:
      - "{{ gitlab_container_ssl_port }}"
      - "{{ gitlab_container_ssh_port }}"
    env:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}'
  tags:
    - initial_setup
    - create_gitlab

- name: "Check if GitLab container exists"
  become_user: "{{ gitlab_service_account }}"
  podman_container_info:
    name: "{{ gitlab_server_name }}"
  register: gitlab_container_info
  tags:
    - initial_setup
    - create_gitlab

- name: "Set fact for gitlab_container_exists"
  set_fact:
    gitlab_container_exists: "{{ gitlab_container_info.containers | length > 0 }}"
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Restart {{ gitlab_server_name }} Container"
  become_user: "{{ gitlab_service_account }}"
  podman_container:
    name: "{{ gitlab_server_name }}"
    state: started
  when: gitlab_container_exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Pause for 1 Minute After Restart"
  pause:
    minutes: 1
  when: gitlab_container_exists | bool
  tags:
    - initial_setup
    - create_gitlab
    
- name: "Deploy GitLab | Modify gitlab.rb to Support FQDN and External PostgreSQL"
  become_user: "{{ gitlab_service_account }}"
  blockinfile:
    path: "/home/{{ gitlab_service_account }}/.local/share/containers/storage/volumes/git_app_data/_data/gitlab.rb"
    block: |
      # Add Support for SSL 
      external_url "https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}"

      gitlab_rails['initial_root_password'] = "{{ gitlab_root_password }}"

      registry_external_url "https://{{ gitlab_server_hostname }}{{ domain }}"

      letsencrypt['enable'] = false
      
      #nginx['ssl_certificate'] = "/etc/gitlab/ssl/{{ gitlab_server_hostname }}{{ domain }}.crt"
      #nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/{{ gitlab_server_hostname }}{{ domain }}.key"
      nginx['listen_port'] = {{ gitlab_gui_ssl_port }}

      # Disable the built-in Postgres
      postgresql['enable'] = false

      # External PostgreSQL Configuration
      gitlab_rails['db_adapter'] = 'postgresql'
      gitlab_rails['db_encoding'] = 'utf8'
      gitlab_rails['db_host'] = '{{ postgres_ip }}'
      gitlab_rails['db_port'] = '5432'
      gitlab_rails['db_username'] = 'postgres'
      gitlab_rails['db_password'] = '{{ gitlab_postgres_password }}'
  when: gitlab_container_exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Create GitLab SSL Directory"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman exec -it {{ gitlab_server_name }} mkdir /etc/gitlab/ssl/"
  when: not gitlab_ssl_dir_status.stat.exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Copy SSL Cert to GitLab SSL Directory"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman cp {{ item }}"
  with_items:
    - "/etc/{{ gitlab_server_hostname }}/ssl/{{ gitlab_server_hostname }}{{ domain }}.pem {{ gitlab_server_name }}:/etc/gitlab/ssl/{{ gitlab_server_hostname }}{{ domain }}.key"
    - "/etc/{{ gitlab_server_hostname }}/ssl/{{ gitlab_server_hostname }}{{ domain }}.crt {{ gitlab_server_name }}:/etc/gitlab/ssl/{{ gitlab_server_hostname }}{{ domain }}.crt"
  when: not gitlab_ssl_dir_status.stat.exists | bool
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Reconfigure GitLab after changes"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman exec {{ gitlab_server_name }} gitlab-ctl reconfigure"
  when: gitlab_container_exists | bool
  ignore_errors: true
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Create Systemd User Directory"
  become_user: "{{ gitlab_service_account }}"
  file:
    path: "/home/{{ gitlab_service_account }}/.config/systemd/user"
    state: directory
  when:
    - not gitlab_service_file_status.stat.exists | bool
  tags:
    - initial_setup
    - create_gitlab


- name: "Deploy GitLab | Create Systemd Service Files for GitLab Server"
  become_user: "{{ gitlab_service_account }}"
  shell: "podman generate systemd --name {{ gitlab_server_name }} --files --new"
  args:
    chdir: "/home/{{ gitlab_service_account }}/.config/systemd/user/"
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Start {{ gitlab_server_name }} with Systemd"
  become_user: "{{ gitlab_service_account }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ gitlab_service_account_uid }}"
  systemd:
    name: "container-{{ gitlab_server_name }}.service"
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  tags:
    - initial_setup
    - create_gitlab

- name: "Deploy GitLab | Wait for GitLab to be Up"
  uri:
    url: "https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/users/sign_in"
    validate_certs: no
  register: gitlab_response
  until: gitlab_response.status == 200
  retries: 75
  delay: 10
  tags:
    - create_gitlab

- name: "Deploy GitLab | Reload Systemd Daemon"
  become_user: "{{ gitlab_service_account }}"
  shell: "systemctl daemon-reload"
  ignore_errors: true
  tags:
    - initial_setup
    - create_gitlab     
    
- name: "Deploy GitLab | Wait for GitLab to be Up"
  uri:
    url: "https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/users/sign_in"
    validate_certs: no
  register: gitlab_response
  until: gitlab_response.status == 200
  retries: 75
  delay: 10
  tags:
    - create_gitlab

#- name: "Retrieve GitLab Admin Password"
#  become_user: "{{ gitlab_service_account }}"
#  command: "podman exec -it {{ gitlab_server_name }} grep 'Password:' /etc/gitlab/initial_root_password"
#  register: gitlab_password_result
#  tags:
#    - retrieve_password

- name: "Deploy GitLab | Print GitLab Admin Credentials"
  debug:
    msg: |
      GitLab is up and running.
      You can access it at https://{{ gitlab_server_hostname }}{{ domain }}:{{ gitlab_gui_ssl_port }}/
      Admin Username: root
      Admin Password: {{ gitlab_root_password }}
  tags:
    - print_credentials

- name: debug output
  debug:
    var: " {{ gitlab_root_password }} "
  tags:
    - create_gitlab